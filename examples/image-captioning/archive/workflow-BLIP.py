from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
import dotenv
import cognify
from transformers import BlipProcessor, BlipForConditionalGeneration
from PIL import Image

dotenv.load_dotenv()
model = ChatOpenAI(model="gpt-4o", temperature=0, max_tokens=300)

# BLIP model for vision-language tasks
processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
vlm_model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")

image_analysis_prompt = """
You are an image understanding expert. Your task is to analyze an image and describe its contents clearly.
Identify key objects, actions, and any relevant context.
"""

image_analysis_template = ChatPromptTemplate.from_messages(
    [
        ("system", image_analysis_prompt),
        ("human", "image description:\n{caption}\n"),
    ]
)

image_analysis_agent = image_analysis_template | model

classification_prompt = """
You are an image classifier. Given a description of an image, your task is to categorize it into one of the predefined classes.
"""

classification_template = ChatPromptTemplate.from_messages(
    [
        ("system", classification_prompt),
        ("human", "image description:\n{caption}\n"),
    ]
)

classification_agent = classification_template | model

def generate_caption(image_path):
    image = Image.open(image_path).convert("RGB")
    inputs = processor(image, return_tensors="pt")
    output = vlm_model.generate(**inputs)
    caption = processor.decode(output[0], skip_special_tokens=True)
    return caption

@cognify.register_workflow
def vlm_workflow(workflow_input):
    caption = generate_caption(workflow_input)
    # analyzed_caption = image_analysis_agent.invoke({"caption": caption}).content
    # classification = classification_agent.invoke({"caption": analyzed_caption}).content
    return {
        "workflow_output": caption,              # Generated by BLIP
        # "workflow_output": analyzed_caption,    # Generated by GPT
        # "classification": classification # GPT's classification
    }

if __name__ == "__main__":
    image_file = "test_image.jpg"  # TODO: replace with img folder
    output = vlm_workflow(image_file)
    print(output)